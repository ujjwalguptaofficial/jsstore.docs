"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2081],{4137:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>b});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),d=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=d(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=d(t),p=o,b=u["".concat(c,".").concat(p)]||u[p]||m[p]||a;return t?r.createElement(b,i(i({ref:n},l),{},{components:t})):r.createElement(b,i({ref:n},l))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var d=2;d<a;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5250:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var r=t(7462),o=(t(7294),t(4137));const a={keywords:["migrate","v3","v4","indexeddb","jsstore"],sidebar_position:22},i="Migrating from v3 to v4",s={unversionedId:"v3-to-v4",id:"v3-to-v4",title:"Migrating from v3 to v4",description:"v4 now suports multiple database feature, which was lacking in earlier version of jsstore. In order to do that some big changes has been done in v4.",source:"@site/docs/v3-to-v4.md",sourceDirName:".",slug:"/v3-to-v4",permalink:"/docs/v3-to-v4",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/v3-to-v4.md",tags:[],version:"current",sidebarPosition:22,frontMatter:{keywords:["migrate","v3","v4","indexeddb","jsstore"],sidebar_position:22},sidebar:"tutorialSidebar",previous:{title:"Import Scripts",permalink:"/docs/import-scripts"},next:{title:"Event",permalink:"/docs/event"}},c={},d=[],l={toc:d},u="wrapper";function m(e){let{components:n,...a}=e;return(0,o.kt)(u,(0,r.Z)({},l,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"migrating-from-v3-to-v4"},"Migrating from v3 to v4"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"v4 now suports multiple database feature, which was lacking in earlier version of jsstore. In order to do that some big changes has been done in v4.")),(0,o.kt)("p",null,"In order to migrate from v3 to v4 - Increase db version greater than current version. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"var dbSchema = {\n    name:\"Demo\",\n    version: 2 // previous version was 1,\n    tables:[{\n        name:'Products',\n        columns:{\n            id: {\n                autoIncrement:true,\n                primaryKey:true\n            }\n        }\n    }]\n}\n\nvar connection = new JsStore.Connection();\nconnection.initDb(dbSchema);\n")),(0,o.kt)("p",null,"you can find your current db version in indexedDb section of browser development tools."),(0,o.kt)("img",{style:{maxWidth:"100%"},src:t(9565).Z}),(0,o.kt)("p",null,"\ud83d\udc49 Note:- This step will recreate database & in turn all your data will be cleared. "),(0,o.kt)("p",null,"If you want to keep your data, you can fetch data before upgrading then insert it after upgrading. In order to do that you will have to keep two db schema."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"var dbSchema = {\n    name:\"Demo\",\n    version: 1 ,\n    tables:[{\n        name:'Products',\n        columns:{\n            id: {\n                autoIncrement:true,\n                primaryKey:true\n            }\n        }\n    }]\n};\n\nvar newDbSchema = {\n    name:\"Demo\",\n    version: 2 // previous version was 1,\n    tables:[{\n        name:'Products',\n        columns:{\n            id: {\n                autoIncrement:true,\n                primaryKey:true\n            }\n        }\n    }]\n}\n\nvar connection = new JsStore.Connection();\nvar isDbCreated = connection.initDb(dbSchema);\n\nvar tablesData = {};\n\n// if db is opened\nif(!isDbCreated){\n\n    // select from table prodcuts\n    const results =  await connection.select({\n        from:'Products'\n    });\n    tablesData['Products'] = results;\n}\n\nisDbCreated = connection.initDb(newDbSchema);\n\nif(isDbCreated){\n    for(const key in tablesData){\n        connection.insert({\n            into:key,\n            values: tablesData[key]\n        })\n    }\n}\n")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"\ud83d\udc49 Another simple way to upgrade db & save your data is - to keep two dbs. So you create your schema with new db name and then after new db is created, fetch data from old db."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"var dbSchema = {\n    name:\"Demo\",\n    tables:[{\n        name:'Products',\n        columns:{\n            id: {\n                autoIncrement:true,\n                primaryKey:true\n            }\n        }\n    }]\n};\n\nvar newDbSchema = {\n    name:\"DemoV2\",\n    tables:[{\n        name:'Products',\n        columns:{\n            id: {\n                autoIncrement:true,\n                primaryKey:true\n            }\n        }\n    }]\n}\n\nvar connection = new JsStore.Connection();\nvar isDbCreated = connection.initDb(newDbSchema);\n\n// if db is created\nif(isDbCreated){\n\n    var oldDbConnection = new JsStore.Connection();\n    var isOldDbCreated = oldDbConnection.initDb(dbSchema);\n\n    if(!isOldDbCreated){ // when db is opened\n\n      // select from old db\n        const results =  await oldDbConnection.select({\n            from:'Products'\n        });\n\n     // insert into new db\n        connection.insert({\n            into:key,\n            values: results\n        })\n\n      // now i don't need old db, so drop db\n\n        oldDbConnection.dropDb();\n\n    }    \n}\n\n")))}m.isMDXComponent=!0},9565:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/version_screenshot-18fd3a4bb2fc90e47d3a7f566b42d05e.png"}}]);